/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/allocations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all allocations for a user
         * @description The default and max number of results in a response are 100.
         */
        get: operations['listAllocations'];
        put?: never;
        /**
         * Create Satellite
         * @description Create Satellite by name and version(optional).
         *     Customers can use any version listed in the `/v1/allocations/versions` endpoint (use attribute `value`).
         *     If no version is specified, it will take the latest available version for Satellite.
         */
        post: operations['createSatellite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/versions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Satellite versions
         * @description Returns list of Satellite version 6.0 and above
         */
        get: operations['listVersionsAllocation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an allocation by UUID
         * @description System, RHUI, Hypervisor are unsupported allocation types
         */
        get: operations['showAllocation'];
        /**
         * Update an allocation
         * @description Allows to update simpleContentAccess for Satellite of version 6.3 and above
         *     Possible value for simpleContentAccess are:
         *
         *     - enabled
         *     - disabled
         */
        put: operations['updateAllocation'];
        post?: never;
        /**
         * Remove allocation profile
         * @description The default success response will be 204
         *
         *     System, RHUI, Hypervisor are unsupported allocation types
         */
        delete: operations['removeAllocation'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/entitlements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach entitlement to allocation
         * @description The default success response will be 200.
         *
         *     System, RHUI, Hypervisor are unsupported allocation types.
         *     SAM 1.3 or higher, and Satellite 5.6 versions are supported.
         */
        post: operations['attachEntitlementAllocation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/entitlements/{EntitlementID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update attached entitlement to allocation
         * @description The default success response will be 200.
         *     System, RHUI, Hypervisor are unsupported allocation types
         */
        put: operations['updateEntitlementAllocation'];
        post?: never;
        /**
         * Remove entitlement from the allocation
         * @description The default success response will be 204.
         */
        delete: operations['removeAllocationEntitlement'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/export': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trigger allocation manifest export
         * @description Starts job to generate export for an allocation. To check the status of the export job visit the href in the response.
         *
         *     System, RHUI, Hypervisor are unsupported allocation types. SAM 1.2 or lower and Satellite 5.9 or lower versions are unsupported.
         */
        get: operations['exportAllocation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/export/{ExportID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download allocation manifest
         * @description Success response contains a zip file. The link is one-time download and expires after one try. Trigger export job to get another download link.
         *
         *     Content-Type: application/zip
         */
        get: operations['getExportAllocation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/exportJob/{ExportJobID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check status of allocation manifest export
         * @description Returns export download link in response.
         */
        get: operations['exportJobAllocation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/pools': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all pools for an allocation
         * @description System, RHUI, Hypervisor are unsupported allocation types. SAM 1.3 or higher, and Satellite 5.6 versions are supported.
         */
        get: operations['listAllocationPools'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/allocations/{uuid}/{EntitlementID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove entitlement from the allocation
         * @deprecated
         * @description The default success response will be 204.
         */
        delete: operations['removeAllocationEntitlementDeprecated'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a provider account by source id
         * @description Removes a currently-enabled provider account, including removing access to Gold Images, where applicable using the sourceID provided. You can find a list of currently-enabled provider accounts and provider short names from the `/v1/cloud_access_providers/enabled` endpoint.
         *
         */
        delete: operations['RemoveProviderAccountBySourceID'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/enabled': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all enabled cloud access providers for a user
         * @description Returns the full list of all enabled Red Hat products and Cloud Access provider accounts/subscriptions associated with the userâ€™s Red Hat account.
         *     - For Products that are expired `nextRenewal` field would be omitted and `totalQuantity` would be `0`.
         *     - Product objects can have `totalQuantity` field as `-1` indicating `Unlimited` quantity available.
         *     - The `nextRenewalDate` field of a Product has the format `YYYY-MM-DD`.
         *     - The `goldImageStatus` details are available for an account when the Provider is a certified Gold Image Provider and the account has been requested for gold image access. The `status` field of a goldImageStatus object could be `"Requested"`, `"Granted"` or `"Failed"`.
         *     - The `imageGroups` field is available for a product when the Provider is a certified Gold Image Provider, and the product has a gold image group available for it.
         *
         */
        get: operations['listEnabledCloudAccessProviders'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/{ProviderShortName}/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add accounts for a provider
         * @description Add up to `100` new provider accounts, with optional nicknames, to a currently-enabled provider for Red Hat Cloud Access. You can find a list of currently-enabled provider accounts and provider short names from the `/v1/cloud_access_providers/enabled` endpoint.
         *
         */
        post: operations['AddProviderAccounts'];
        /**
         * Remove a provider account
         * @description Removes a currently-enabled provider account, including removing access to Gold Images, where applicable. You can find a list of currently-enabled provider accounts and provider short names from the `/v1/cloud_access_providers/enabled` endpoint.
         *
         */
        delete: operations['RemoveProviderAccount'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/{ProviderShortName}/accounts/{AccountID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update provider account
         * @description Updates the nickname for a currently-enabled provider account. You can find a list of currently-enabled provider accounts and provider short names from the `/v1/cloud_access_providers/enabled` endpoint.
         *
         */
        put: operations['UpdateProviderAccount'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/{ProviderShortName}/accounts/{AccountID}/verification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Verify a provider account
         * @description Verifies a cloud provider account for use with RHSM Auto Registration, which allows for cloud instances to automatically register with RHSM upon provisioning.
         *
         *     Auto Registration is currently only available for the following cloud providers:
         *       - AWS
         *       - AWS GovCloud
         *       - ACS China
         *       - Microsoft Azure
         *       - Google Cloud Provider
         *
         *
         *     This endpoint accepts a cloud instance "identity" document and "signature" from the cloud provider's metadata service. Use the following links for more info on how to obtain these:
         *      - For AWS: [EC2 Instance Identity Document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html) and [Signature](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/verify-rsa2048.html)
         *      - For Azure: [Azure Instance Metadata](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service) and [Signature](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/instance-metadata-service?tabs=linux#attested-data)
         *      - For GCP: [Compute Engine Instance Identity JWT token](https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature). Note: Please use "https://subscription.rhsm.redhat.com:443/subscription" as value for "audience" query parameter and "full" as value for "format" query parameter while generating the token
         *
         *
         *     An HTTP 400 response will be returned if the cloud provider does not support automatic registration, the signature of the document cannot be verified, the cloud provider account has already been verified for a different Red Hat account, or if the account in the instance metadata does not match the provided account ID.
         *
         *     An HTTP 204 response will be returned if the account has been successfully verified. Attempts to verify an account that is already verified will return an HTTP 204 response with no changes being made.
         *
         */
        put: operations['VerifyProviderAccount'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/cloud_access_providers/{ProviderShortName}/goldimage': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Gold image access
         * @description Requests access to Red Hat Gold Images, where available, for currently-enabled products and provider accounts. Customers can request Red Hat Gold Images for account IDs and product image groups listed in the `/v1/cloud_access_providers/enabled` endpoint using the provider short name listed in the same response. After the request has been accepted for processing, gold image status for accounts can be checked in the `/v1/cloud_access_providers/enabled` endpoint response.
         *
         */
        post: operations['EnableGoldImages'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all errata for a user's systems
         * @description The default and max results in a response are 1000.
         */
        get: operations['listErrata'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata/cset/{ContentSet}/arch/{Arch}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the errata for the specified content set and arch
         * @description Limit is the number of results in a response. The default limit is 50 and max limit is 100.
         */
        get: operations['listErrataByContentSetArch'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata/{AdvisoryID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the details of an advisory
         * @description This will get the details of an advisory specified by its advisoryID.
         */
        get: operations['showErratum'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata/{AdvisoryID}/images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all updated container images for an advisory
         * @description This will list all updated container images that address the advisory specified
         */
        get: operations['listErratumImages'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata/{AdvisoryID}/packages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all packages for an advisory
         * @description The default and max results in a response are 50.
         */
        get: operations['listErratumPackages'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/errata/{AdvisoryID}/systems': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all systems for an advisory
         * @description The default and max results in a response are 1000.
         */
        get: operations['listErratumSystems'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/images/cset/{ContentSet}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available images in a content set
         * @description List all the available images in a given content set. The content set parameter is expected to be
         *      properly formatted (for example rhel-8-for-x86_64-baseos-isos). And the user requesting the endpoint
         *     is expected to have Download permission (UGC). If the user is entitled to an image, a "downloadHref" attribute is added in the image response object which links to image download API. The list is paginated by default to 25 results in a response and goes to maximum 100 results in a response. Use pagination by setting offset and limit url parameters (valid integer values).
         *
         */
        get: operations['listImagesByContentSet'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/images/rhel/{Version}/{Arch}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List RHEL image downloads by version and architecture.
         * @description List all the available images for the given version and architecture. The Version parameter is expected to be a valid RHEL version. Example: 8.1, 8.2 etc.
         *     The Arch parameter should be one of the valid RHEL architectures. Example: x86_64, aarch64 etc.
         *     The user requesting the endpoint is expected to have Download permission (UGC).
         *     If the user is entitled to an image, a "downloadHref" attribute is added in the image response object which links to image download API.
         *
         */
        get: operations['listImageDownloadsByVersionArch'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/images/{checksum}/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download an image by its SHA256 checksum
         * @description Find an image by its SHA256 checksum and generate a download link with a short-lived expiration. It is expected for users to obtain a new download link every time an image is downloaded and to not store the link for more than several minutes. If the user has "Download Software and Updates" permissions and a valid subscription for the image, they will receive a HTTP 307 redirect to the location on the Red Hat CDN. Clients can either follow the HTTP redirect or find the download URL in the response body.
         *
         */
        get: operations['downloadImage'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organization': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of the user's organization
         * @description Show Simple Content Access details of user's organization
         */
        get: operations['checkOrgSCACapability'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/packages/cset/{ContentSet}/arch/{Arch}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all the packages for the specified content set and arch.
         * @description The default and max results in a response are 50 and 100 respectively.
         */
        get: operations['listPackagesByContentSetArch'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/packages/{Checksum}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the details of a package
         * @description This will get the details of a package specified by its checksum.
         */
        get: operations['showPackage'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/packages/{checksum}/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a package by its SHA256 checksum
         * @description Find a package by its SHA256 checksum and generate a download link with a short-lived expiration. It is expected for users to obtain a new download link every time a package is downloaded and to not store the link for more than several minutes. If the user has "Download Software and Updates" permissions and a valid subscription for the package, they will receive an HTTP 307 redirect to the location on the Red Hat CDN. Clients can either follow the HTTP redirect or find the download URL in the response body.
         *
         */
        get: operations['downloadPackage'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/subscriptions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all subscriptions for a user
         * @description The default and max results in a response are 50.
         */
        get: operations['listSubscriptions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/subscriptions/{SubscriptionNumber}/contentSets': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all content sets for a subscription
         * @description The default and max results in a response are 1000.
         */
        get: operations['listSubContentSets'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/subscriptions/{SubscriptionNumber}/systems': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all systems consuming a subscription
         * @description The default and max results in a response are 100.
         */
        get: operations['listSubSystems'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all systems for a user
         * @description The default and max number of results in a response are 100.
         */
        get: operations['listSystems'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a system specified by UUID.
         * @description Sam & Satellite systems are unsupported system types.
         */
        get: operations['showSystem'];
        put?: never;
        post?: never;
        /**
         * Remove system profile
         * @description The default success response will be 204
         */
        delete: operations['removeSystem'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}/entitlements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach entitlement to system
         * @description The default success response will be 200.
         *
         *     Sam & Satellite systems are unsupported system types.
         */
        post: operations['attachEntitlement'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}/errata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all applicable errata for a system
         * @description The default and max number of results in a response are 100.
         */
        get: operations['listSystemErrata'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}/packages': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all packages for a system
         * @description The default and max number of results in a response are 1000.
         */
        get: operations['listSystemPackages'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}/pools': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all pools for a system
         * @description The default and max number of results in a response are 50.
         */
        get: operations['listSystemPools'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/systems/{SystemUUID}/{EntitlementID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove entitlement from the system
         * @description The default success response will be 204.
         */
        delete: operations['removeSystemEntitlement'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description APIPageParam details the pagination parameters in APIResponse */
        APIPageParam: {
            count?: number;
            limit?: number;
            offset?: number;
        };
        /** @description An account to be added */
        AddProviderAccount: {
            id?: string;
            nickname?: string;
        };
        /** Allocation is an entity that consumes entitlements. Also referred as a Distributor. */
        Allocation: {
            entitlementQuantity?: number;
            name?: string;
            simpleContentAccess?: string;
            type?: string;
            url?: string;
            uuid?: string;
            version?: string;
        };
        /** @description details of a subscription allocation */
        AllocationDetails: {
            createdBy?: string;
            createdDate?: components['schemas']['Date'];
            entitlementsAttached?: components['schemas']['EntitlementsAttachedResponse'];
            entitlementsAttachedQuantity?: number;
            lastModified?: components['schemas']['Date'];
            name?: string;
            simpleContentAccess?: string;
            type?: string;
            uuid?: string;
            version?: string;
        };
        /** @description details of a subscription allocation */
        AllocationSummary: {
            contentAccessMode?: string;
            createdBy?: string;
            createdDate?: components['schemas']['Date'];
            entitlementsAttachedQuantity?: number;
            lastModified?: components['schemas']['Date'];
            name?: string;
            type?: string;
            uuid?: string;
            version?: string;
        };
        /** @description List of satellite version */
        AllocationVersion: {
            description?: string;
            value?: string;
        };
        /** System is an entity that consumes entitlements. Also referred as a Consumer. */
        AttachEntitlement: {
            autoAttachSetting?: boolean;
            complianceStatus?: string;
            createdBy?: string;
            createdDate?: components['schemas']['Date'];
            entitlementStatus?: string;
            entitlementsAttached?: components['schemas']['EntitlementsAttachedResponse'];
            entitlementsAttachedCount?: number;
            errataApplicabilityCounts?: components['schemas']['ErrataApplicabilityCounts'];
            factsCount?: number;
            hostname?: string;
            installedProductsCount?: number;
            lastCheckin?: components['schemas']['Date'];
            name?: string;
            serviceLevelPreference?: string;
            type?: string;
            uuid?: string;
        };
        /** ContentSet represent a contentset for the listContentSets API Response. */
        ContentSet: {
            arch?: string;
            enabled?: boolean;
            label?: string;
            name?: string;
            type?: string;
        };
        /**
         * @description Date represents the date format used for API returns
         * @example 2006-01-02T15:04:05.000Z
         */
        Date: string;
        /** DetailResponse is the user-friendly response from the service. */
        DetailResponse: {
            contractNumber?: string;
            endDate?: components['schemas']['Date'];
            pools?: components['schemas']['Pool'][];
            quantity?: string;
            sku?: string;
            startDate?: components['schemas']['Date'];
            status?: string;
            subscriptionName?: string;
            subscriptionNumber?: string;
        };
        DownloadLink: {
            /**
             * @description time at which the download link expires (in UTC)
             * @example 2006-01-02T15:04:05.000Z
             */
            expiration?: string;
            /**
             * @description filename of the file on the download link
             * @example filename-1.2.3-1.x86_64.rpm
             */
            filename?: string;
            /**
             * @description URL to obtain the image
             * @example https://access.cdn.redhat.com/content/origin/files/sha256/64/643e706cf7db9e93e706637af92d80eb58377dd0c64ac1e9ce6a72700aa04c2a/rhel-8.1-x86_64-boot.iso?_auth_=1582920605_7e8153e1bdc2f46636653e2efb17bc65
             */
            href?: string;
        };
        /** @description Enabled Cloud Access Provider details including products and accounts. */
        EnabledCloudAccessProvider: {
            accounts?: components['schemas']['EnabledProviderAccount'][];
            name?: string;
            products?: components['schemas']['EnabledProduct'][];
            shortName?: string;
        };
        /** @description Enabled Product represents a cloud access provider product */
        EnabledProduct: {
            enabledQuantity?: number;
            imageGroups?: string[];
            name?: string;
            nextRenewal?: components['schemas']['ShortDate'];
            sku?: string;
            totalQuantity?: number;
        };
        /** @description Enabled Provider Account represents a cloud access provider account */
        EnabledProviderAccount: {
            dateAdded: components['schemas']['Date'];
            goldImageStatus?: components['schemas']['GoldImageStatus'][];
            id: string;
            nickname: string;
            /** @description Source ID of linked account (only for accounts created via Sources on cloud.redhat.com) */
            sourceId?: string;
            /** @description verification status for RHSM Auto Registration (only displayed for supported cloud providers) */
            verified?: boolean;
        };
        /** @description EntitlementsAttachedResponse wraps data obtained for EntitlementsAttached and sends metadata about it using helpers.OptionalResult */
        EntitlementsAttachedResponse: {
            reason?: string;
            valid?: boolean;
            value?: components['schemas']['EntitlementsAttachedResponseValue'][];
        };
        /** @description EntitlementsAttachedResponseValue represents the Value field in the EntitlementsAttachedResponse */
        EntitlementsAttachedResponseValue: {
            contractNumber?: string;
            endDate?: components['schemas']['Date'];
            entitlementQuantity?: number;
            id?: string;
            sku?: string;
            startDate?: components['schemas']['Date'];
            subscriptionName?: string;
        };
        /** @description Applicable errata details */
        ErrataApplicabilityCounts: {
            reason?: string;
            valid?: boolean;
            value?: components['schemas']['ErrataCount'];
        };
        /** @description ErrataCount is the errata information for a System */
        ErrataCount: {
            bugfixCount?: number;
            enhancementCount?: number;
            securityCount?: number;
        };
        ErratumDetails: {
            affectedProducts?: string[];
            bugzillas?: components['schemas']['Reference'][];
            copyrightYear?: string;
            cves?: string;
            description?: string;
            id?: string;
            issued?: components['schemas']['Date'];
            lastUpdated?: components['schemas']['Date'];
            references?: components['schemas']['Reference'][];
            severity?: string;
            solution?: string;
            summary?: string;
            synopsis?: string;
            type?: string;
            typeSeverity?: string;
        };
        /** @description an erratum listed for a system */
        ErratumForSystem: {
            href?: string;
            id?: string;
            published?: components['schemas']['Date'];
            severity?: string;
            synopsis?: string;
            type?: string;
        };
        /** @description ErratumInContentSet contains information on an erratum listed in a content set */
        ErratumInContentSet: {
            advisoryId?: string;
            href?: string;
            publishDate?: components['schemas']['Date'];
            severity?: string;
            synopsis?: string;
            type?: string;
        };
        /** @description ErrorDetails details the Error in ErrorResponse */
        ErrorDetails: {
            code?: number;
            message?: string;
        };
        /** @description facts give additional details about the system */
        Facts: {
            key?: string;
            value?: string;
        };
        /** @description Gold Image Status Details of a cloud access provider account for an image provider. */
        GoldImageStatus: {
            /**
             * @description Description of the provider image group
             * @example Red Hat Enterprise Linux
             */
            description?: string;
            /**
             * @description Name of the requested provider image group
             * @example RHEL
             */
            name?: string;
            /**
             * @description Status of Gold Image Request
             * @example Requested
             */
            status?: string;
        };
        /** @description Image Details for provided version and architecture. */
        ImageForVersionArch: {
            arch?: string;
            checksum?: string;
            datePublished?: components['schemas']['Date'];
            downloadHref?: string;
            filename?: string;
            imageName?: string;
        };
        /** @description Image Details in a content set image listing. */
        ImageInContentSet: {
            arch?: string;
            checksum?: string;
            datePublished?: components['schemas']['Date'];
            downloadHref?: string;
            filename?: string;
            imageName?: string;
        };
        /** @description details of installed products on the system */
        InstalledProducts: {
            arch?: string;
            productID?: string;
            productName?: string;
            status?: string;
            version?: string;
        };
        /** @description ListResponse is the actual collection of subscription details that gets
         *     rendered */
        ListResponse: components['schemas']['DetailResponse'][];
        /** @description MyErratum contains erratum information that affects at least one system */
        MyErratum: {
            advisoryId?: string;
            affectedSystemCount?: number;
            details?: string;
            publishDate?: components['schemas']['Date'];
            synopsis?: string;
            systems?: string;
            type?: string;
        };
        /** Organization Simple Content Access details. */
        OrgSimpleContentAccess: {
            id?: string;
            simpleContentAccess?: string;
            simpleContentAccessCapable?: boolean;
            systemPurposeAttributes?: components['schemas']['SystemPurposeAttributes'];
        };
        /** @description PackageDetail wraps an errata package and adds a RefURL */
        PackageDetail: {
            arch?: string;
            checksum?: string;
            contentSets?: string[];
            details_url?: string;
            epoch?: number;
            filename?: string;
            name?: string;
            release?: string;
            repoTags?: string[];
            summary?: string;
            version?: string;
        };
        /** @description package installed on a system */
        PackageForSystem: {
            advisories?: {
                advisory?: string;
                url?: string;
            }[];
            arch?: string;
            epoch?: number;
            errataCount?: number;
            name?: string;
            release?: string;
            version?: string;
        };
        /** @description Pool represents pool information that matter for the detail list */
        Pool: {
            consumed?: number;
            id?: string;
            quantity?: number;
            type?: string;
        };
        /** @description PoolDetail is an entry in the system/allocation pools listing */
        PoolDetail: {
            contractNumber?: string;
            endDate?: components['schemas']['Date'];
            entitlementsAvailable?: number;
            id?: string;
            serviceLevel?: string;
            sku?: string;
            startDate?: components['schemas']['Date'];
            subscriptionName?: string;
            subscriptionNumber?: string;
        };
        /** @description Reference contains a reference to an external item */
        Reference: {
            href?: string;
            id?: string;
            title?: string;
            type?: string;
        };
        /**
         * @description ShortDate represents the short date format used for API returns where time precision is not needed
         * @example 2006-01-02T00:00:00.000Z
         */
        ShortDate: string;
        /** System is an entity that consumes entitlements. Also referred as a Consumer. */
        ShowSystem: {
            autoAttachSetting?: boolean;
            complianceStatus?: string;
            createdBy?: string;
            createdDate?: components['schemas']['Date'];
            entitlementStatus?: string;
            entitlementsAttached?: components['schemas']['EntitlementsAttachedResponse'];
            entitlementsAttachedCount?: number;
            errataApplicabilityCounts?: components['schemas']['ErrataApplicabilityCounts'];
            facts?: components['schemas']['Facts'];
            factsCount?: number;
            hostname?: string;
            installedProducts?: components['schemas']['InstalledProducts'];
            installedProductsCount?: number;
            lastCheckin?: components['schemas']['Date'];
            name?: string;
            serviceLevelPreference?: string;
            type?: string;
            uuid?: string;
        };
        /** @description SubSystem represents a single entity in the list subscription's systems API */
        SubSystem: {
            complianceStatus?: string;
            details?: string;
            lastCheckin?: components['schemas']['Date'];
            systemName?: string;
            totalEntitlementQuantity?: number;
            type?: string;
            uuid?: string;
        };
        /** System is an entity that consumes entitlements. Also referred as a Consumer. */
        System: {
            entitlementCount?: number;
            entitlementStatus?: string;
            errataCounts?: components['schemas']['ErrataCount'];
            hostname?: string;
            href?: string;
            lastCheckin?: components['schemas']['Date'];
            name?: string;
            type?: string;
            username?: string;
            uuid?: string;
        };
        /** @description System purpose settings available to an organization */
        SystemPurposeAttributes: {
            roles?: string[];
            serviceLevel?: string[];
            usage?: string[];
        };
        contentSetArchMock: {
            body?: components['schemas']['ErratumInContentSet'][];
            pagination?: components['schemas']['APIPageParam'];
        };
        exportJobResponse: {
            exportID?: string;
            href?: string;
        };
        exportResponse: {
            exportJobID?: string;
            href?: string;
        };
        myErrataListMock: {
            body?: components['schemas']['MyErratum'][];
            pagination?: components['schemas']['APIPageParam'];
        };
        ongoingExportJobResponse: {
            message?: string;
        };
        pkgContentSetArch: {
            arch?: string;
            buildDate?: components['schemas']['Date'];
            buildHost?: string;
            checksum?: string;
            contentSets?: string[];
            description?: string;
            downloadHref?: string;
            epoch?: string;
            group?: string;
            href?: string;
            license?: string;
            name?: string;
            release?: string;
            size?: number;
            summary?: string;
            version?: string;
        };
        pkgDetails: {
            arch?: string;
            buildDate?: components['schemas']['Date'];
            buildHost?: string;
            checksum?: string;
            contentSets?: string[];
            description?: string;
            epoch?: string;
            group?: string;
            href?: string;
            license?: string;
            name?: string;
            release?: string;
            size?: number;
            summary?: string;
            version?: string;
        };
        pkgListMock: {
            body?: components['schemas']['PackageDetail'][];
            pagination?: components['schemas']['APIPageParam'];
        };
        poolsListMock: {
            body?: components['schemas']['PoolDetail'][];
            pagination?: components['schemas']['APIPageParam'];
        };
        /** @description systemList is a System Slice */
        systemList: components['schemas']['System'][];
        systemListMock: {
            body?: components['schemas']['System'][];
            pagination?: components['schemas']['APIPageParam'];
        };
        updatedImage: {
            architecture?: string;
            digest?: string;
            imagePlusDigest?: string;
            name?: string;
        };
        updatedImagesList: {
            body?: components['schemas']['updatedImage'][];
        };
    };
    responses: {
        /** @description Accepted: The request has been accepted for processing, but the processing has not been completed. */
        Accepted: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description BadRequest error */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description Forbidden error */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description GatewayTimeout error */
        GatewayTimeout: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description InternalServerError error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description No Content */
        NoContent: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description NotAcceptable error */
        NotAcceptable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description NotFound error */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
        /** @description Unauthorized error */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': {
                    error?: components['schemas']['ErrorDetails'];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listAllocations: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
                type?: 'SAM' | 'Satellite';
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of allocations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['Allocation'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    createSatellite: {
        parameters: {
            query: {
                /** @description must be less than 100 characters and use only numbers, letters, underscores, hyphens, and periods */
                Name: string;
                version?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AllocationSummary'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listVersionsAllocation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of Satellite version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AllocationVersion'][];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    showAllocation: {
        parameters: {
            query?: {
                /** @description Show more details about a allocation */
                include?: 'entitlements';
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ShowAllocation200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AllocationDetails'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    updateAllocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    simpleContentAccess: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    removeAllocation: {
        parameters: {
            query: {
                /** @description Deleting a subscription allocation can have significant impacts on your hosts and activation keys.
                 *     We require a force parameter to make sure the delete operation is intentional. */
                force: true;
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description GatewayTimeout error */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    attachEntitlementAllocation: {
        parameters: {
            query: {
                pool: string;
                /** @description quantity you want to attach */
                quantity?: number;
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AttachEntitlement200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AllocationDetails'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    updateEntitlementAllocation: {
        parameters: {
            query?: {
                /** @description maxItem: quantity must be less than or equal to the maximum number of allowed entitlements in the entitlement pool
                 *     minItem: 1 */
                quantity?: number;
            };
            header?: never;
            path: {
                uuid: string;
                EntitlementID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AllocationDetails'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    removeAllocationEntitlement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
                /** @description Remove an entitlement from an allocation */
                EntitlementID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    exportAllocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ExportAllocation200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['exportResponse'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    getExportAllocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
                ExportID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GetExportAllocation200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': number[];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    exportJobAllocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
                ExportJobID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ExportJobAllocation200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['exportJobResponse'];
                    };
                };
            };
            /** @description AcceptedExportJob202 is a response for accepted and in progress job */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ongoingExportJobResponse'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotAcceptable error */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listAllocationPools: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
                /** @description include future dated pools for satellite 6.3 or higher */
                future?: true;
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListAllocationPools200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['poolsListMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    removeAllocationEntitlementDeprecated: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
                /** @description Remove an entitlement from an allocation */
                EntitlementID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    RemoveProviderAccountBySourceID: {
        parameters: {
            query?: {
                /** @description source id with which we have to delete the provider account */
                sourceID?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listEnabledCloudAccessProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A JSON response object listing cloud access providers and their accounts and products. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['EnabledCloudAccessProvider'][];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    AddProviderAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ProviderShortName: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddProviderAccount'][];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    RemoveProviderAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ProviderShortName: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    id: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    UpdateProviderAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ProviderShortName: string;
                AccountID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    nickname: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    VerifyProviderAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ProviderShortName: 'AWS' | 'AGOV' | 'ACN' | 'MSAZ' | 'GCE';
                AccountID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description base64-encoded cloud instance metadata. For GCE, please use the instance identity token (JWT) as it is. */
                    identity: string;
                    /** @description base64-encoded cloud instance metadata signature. For GCE, please omit this field. */
                    signature: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    EnableGoldImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ProviderShortName: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    accounts: string[];
                    images: string[];
                };
            };
        };
        responses: {
            /** @description Accepted: The request has been accepted for processing, but the processing has not been completed. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listErrata: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListErrata200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['myErrataListMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listErrataByContentSetArch: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                ContentSet: string;
                Arch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListErrataByContentSetArch200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['contentSetArchMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    showErratum: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description unique identifier for a Red Hat advisory */
                AdvisoryID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ShowErratum200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ErratumDetails'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listErratumImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description unique identifier for a Red Hat advisory */
                AdvisoryID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListErratumImages200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['updatedImagesList'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listErratumPackages: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description unique identifier for a Red Hat advisory */
                AdvisoryID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListErratumPackages200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['pkgListMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listErratumSystems: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description unique identifier for a Red Hat advisory */
                AdvisoryID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListErratumSystems200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['systemListMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listImagesByContentSet: {
        parameters: {
            query?: {
                /** @description maximum number of list items in a page */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                ContentSet: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A JSON response object containing image listing. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ImageInContentSet'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listImageDownloadsByVersionArch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Version: string;
                Arch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A JSON response object containing image downloads list. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ImageInContentSet'][];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    downloadImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                checksum: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description redirect to download image on the Red Hat CDN */
            307: {
                headers: {
                    /** @description URL to obtain the image */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['DownloadLink'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    checkOrgSCACapability: {
        parameters: {
            query?: {
                /** @description Request for system purpose attributes in response */
                include?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['OrgSimpleContentAccess'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listPackagesByContentSetArch: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
                filter?: 'latest'[];
            };
            header?: never;
            path: {
                ContentSet: string;
                Arch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListPackagesByContentSetArch200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['pkgContentSetArch'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    showPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Checksum: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ShowPackage200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['pkgDetails'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    downloadPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                checksum: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description redirect to download package on the Red Hat CDN */
            307: {
                headers: {
                    /** @description URL to obtain the package */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['DownloadLink'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSubscriptions: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSubscriptions200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ListResponse'];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSubContentSets: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                SubscriptionNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSubContentSets200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ContentSet'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSubSystems: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                SubscriptionNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSubSystems200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['SubSystem'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSystems: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
                /** @description Filter Systems by System Name */
                filter?: string;
                /** @description Filter Systems by a valid User Name, where User Name is the system owner and wildcard characters are not allowed */
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSystems200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['systemList'];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    showSystem: {
        parameters: {
            query?: {
                /** @description Show more details about a system */
                include?: ('facts' | 'entitlements' | 'installedProducts')[];
            };
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ShowSystem200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ShowSystem'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    removeSystem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description GatewayTimeout error */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    attachEntitlement: {
        parameters: {
            query: {
                pool: string;
                /** @description quantity you want to attach */
                quantity?: number;
            };
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AttachedEntitlement200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['AttachEntitlement'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSystemErrata: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of advisories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['ErratumForSystem'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSystemPackages: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
                /** @description Show errata details for packages */
                errata_detail?: true | false;
                /** @description Show upgradable packages only. Also accepts 'upgradable' as valid query. */
                upgradeable?: true | false;
                /** @description Filter packages */
                filter?: string;
            };
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of packages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        body?: components['schemas']['PackageForSystem'][];
                        pagination?: components['schemas']['APIPageParam'];
                    };
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    listSystemPools: {
        parameters: {
            query?: {
                /** @description max number of results you want */
                limit?: number;
                /** @description index from which you want next items */
                offset?: number;
            };
            header?: never;
            path: {
                SystemUUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSystemPools200 is the success response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['poolsListMock'];
                };
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
    removeSystemEntitlement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                SystemUUID: string;
                /** @description Remove an entitlement from a system */
                EntitlementID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description BadRequest error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Unauthorized error */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description Forbidden error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description NotFound error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
            /** @description InternalServerError error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        error?: components['schemas']['ErrorDetails'];
                    };
                };
            };
        };
    };
}
